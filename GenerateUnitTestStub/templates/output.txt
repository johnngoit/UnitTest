generatedfiles
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormNavTest.Set.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormNavTest.Get.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormNavTest.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormSelectorObjectTest.AdminFormSelectorObject.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormSelectorObjectTest.AdminFormSelectorObject.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormSelectorObjectTest.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.AdminForm.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.AdminForm.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.SaveObjectData.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.SaveDataRecursive.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.SaveData.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.SetNav.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.SetNav.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.GetNavKey.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.GetNavSel1.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.GetNavSel2.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.GetNavPage.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.GetNavView.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.GetNavForceNext.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.LoadObjectData.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.LoadDataRecursive.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.LoadData.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.RefreshSelectorControls.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.RefreshSelectorData.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.Refresh.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.ReplaceText.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.ReplaceText.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.SetVisibleRow.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.SetVisible.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.SetEnabled.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormTest.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormHelpBoxTest.AdminFormHelpBox.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormHelpBoxTest.AdminFormHelpBox.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormHelpBoxTest.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetClickMessage.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetCommandEvent.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetEvent1.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetGridEvent.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetEvent2.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetHorizontal.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.HelpBox.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.HelpBox.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.IsRequired.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetDefault.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetDefault.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetColumns.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetSelectorValues.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetSelectorSelectedItems.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetSelectorCommandArg.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.FromSelectorArg.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetSelectorIDS.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.LoadSelectorResults.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.LoadSelectorSearch.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetSelectorObjects.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.WebControl.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Control.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Space.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Space.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Row.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Row.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.RowSpan.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.DoubleRow.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.RowSpanCenter.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.RowSpacer.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Grid.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Column.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Section.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SubSection.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.TextEditor.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.PlaceHolder.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Message.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Terms.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Terms.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.ChosenMulti.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.ChosenMulti.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.HiddenField.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.TextBox.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.TextBoxSecure.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SearchSelect.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.TextBoxBig.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.TextBox.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.TextArea.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.TextArea.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Password.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Date.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Time.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.NumberBox.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.NumberBox.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.User.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.CheckBox.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.DNNUrl.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.DNNFilePicker.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Label.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Label.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Image.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.ImageUpload.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.FileDelete.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Group.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.LinkButton.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.LinkButtonNoAjax.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.LinkButton.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Link.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Link.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SubView.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SubView.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.View.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.View.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.View.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.View.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Selector.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SMSelector.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.View.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Select2.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Chosen.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.DropList.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Color.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.CheckBoxList.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.TagControl.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.RadioList.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.ListBoxControl.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.ListBoxControl.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Font.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Item.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Item.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Item.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Item.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.Item.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetReadOnly.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetDataSource.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetDataSource.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetDataSource.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.LoadDataSourceItems.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.ProcessSQL.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetFormValues.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetForm.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetCurrentControlRow.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetPostBackMethod.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetParentObject.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetObject.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.DumpControls.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetMainControl.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetControlObject.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetTagSourceValue.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetValue.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetValue.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetValue.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetMessage.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.ClearMessage.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetValue.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetValue.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetValue.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetValueBase.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetGridRowID.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetEnum.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetEnum.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetValueInt.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetValueDecimal.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetValueBool.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetValueDate.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetValueDateNull.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.HasValue.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetValueTimeNull.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetValueTime.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetValueString.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetValueBase.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetItemVisible.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetItemVisible.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.IsVisible.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.RefreshDirectories.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.RefreshDirectories.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.RefreshToolbar.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.CreateToolbar.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SelectActiveToolbar.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.SetActiveView.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.cmdToolbar_Click.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.cmdToolbarLink_Click.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetViewCount.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.ResourceString.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetResourceString.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.CreateToolBarItem.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.CreateListItem.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.RemoveBlankRows.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.CreateFormControls.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.ParseControls.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.ParseControlsSub.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetText.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetClickText.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetText.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.GetHelpText.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.AdminButtonEvent.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.FixString.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.CreateResxSub.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.CreateResx.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.CreateDocsSub.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.CreateDocs.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.CreateImageButton.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.CreateImageButton.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.ShowDivider.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.CreateControls.g.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\UnitTests\Common\AdminFormObjectTest.cs
C:\websites\dnndev.me\DesktopModules\SharedLibrary\SharedLibrary.Test\SharedLibrary.Test.csproj
methodfile

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormNavTest))]
        public void SetConfirm()
        {
			AdminFormNav target = new AdminFormNav();
			OmnitecModuleBase b= new OmnitecModuleBase();
			this.Set(target, b);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormNavTest Set is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormNavTest))]
        public void GetConfirm()
        {
			AdminFormNav target = new AdminFormNav();
			OmnitecModuleBase b= new OmnitecModuleBase();
			this.Get(target, b);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormNavTest Get is not work property");
        }


        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormSelectorObjectTest))]
        public void AdminFormSelectorObjectConfirm()
        {
			AdminFormSelectorObject target = new AdminFormSelectorObject();
			= new ();
			this.AdminFormSelectorObject(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormSelectorObjectTest AdminFormSelectorObject is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormSelectorObjectTest))]
        public void AdminFormSelectorObjectConfirm()
        {
			AdminFormSelectorObject target = new AdminFormSelectorObject();
			string value= "value";
			this.AdminFormSelectorObject(target, value);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormSelectorObjectTest AdminFormSelectorObject is not work property");
        }


        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void AdminFormConfirm()
        {
			AdminForm target = new AdminForm();
			OmnitecModuleBase basep= new OmnitecModuleBase();
			MultiView mainView= new MultiView();
			Control toolbar= new Control();
			this.AdminForm(target, basep, mainView, toolbar);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest AdminForm is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void AdminFormConfirm()
        {
			AdminForm target = new AdminForm();
			OmnitecModuleBase basep= new OmnitecModuleBase();
			MultiView mainView= new MultiView();
			Control toolbar= new Control();
			Control leftNav= new Control();
			this.AdminForm(target, basep, mainView, toolbar, leftNav);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest AdminForm is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void SaveObjectDataConfirm()
        {
			AdminForm target = new AdminForm();
			int moduleID= X;
			AdminFormObject o= new AdminFormObject();
			ref DNNModuleSettings h= new ref();
			this.SaveObjectData(target, moduleID, o, DNNModuleSettings);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest SaveObjectData is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void SaveDataRecursiveConfirm()
        {
			AdminForm target = new AdminForm();
			int moduleID= X;
			AdminFormObject om= new AdminFormObject();
			ref DNNModuleSettings hlp= new ref();
			this.SaveDataRecursive(target, moduleID, om, DNNModuleSettings);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest SaveDataRecursive is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void SaveDataConfirm()
        {
			AdminForm target = new AdminForm();
			int moduleID= X;
			this.SaveData(target, moduleID);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest SaveData is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void SetNavConfirm()
        {
			AdminForm target = new AdminForm();
			string view= "view";
			bool force= new bool();
			this.SetNav(target, view, force);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest SetNav is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void SetNavConfirm()
        {
			AdminForm target = new AdminForm();
			string view= "view";
			int key= X;
			int sel1= X;
			int sel2= X;
			int page= X;
			string string1= "string1";
			this.SetNav(target, view, key, sel1, sel2, page, string1);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest SetNav is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void GetNavKeyConfirm()
        {
			AdminForm target = new AdminForm();
			= new ();
			var result = this.GetNavKey(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest GetNavKey is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void GetNavSel1Confirm()
        {
			AdminForm target = new AdminForm();
			= new ();
			var result = this.GetNavSel1(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest GetNavSel1 is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void GetNavSel2Confirm()
        {
			AdminForm target = new AdminForm();
			= new ();
			var result = this.GetNavSel2(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest GetNavSel2 is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void GetNavPageConfirm()
        {
			AdminForm target = new AdminForm();
			= new ();
			var result = this.GetNavPage(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest GetNavPage is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void GetNavViewConfirm()
        {
			AdminForm target = new AdminForm();
			= new ();
			var result = this.GetNavView(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest GetNavView is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void GetNavForceNextConfirm()
        {
			AdminForm target = new AdminForm();
			= new ();
			var result = this.GetNavForceNext(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest GetNavForceNext is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void LoadObjectDataConfirm()
        {
			AdminForm target = new AdminForm();
			int moduleID= X;
			AdminFormObject o= new AdminFormObject();
			this.LoadObjectData(target, moduleID, o);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest LoadObjectData is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void LoadDataRecursiveConfirm()
        {
			AdminForm target = new AdminForm();
			int moduleID= X;
			AdminFormObject om= new AdminFormObject();
			this.LoadDataRecursive(target, moduleID, om);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest LoadDataRecursive is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void LoadDataConfirm()
        {
			AdminForm target = new AdminForm();
			int moduleID= X;
			this.LoadData(target, moduleID);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest LoadData is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void RefreshSelectorControlsConfirm()
        {
			AdminForm target = new AdminForm();
			= new ();
			this.RefreshSelectorControls(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest RefreshSelectorControls is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void RefreshSelectorDataConfirm()
        {
			AdminForm target = new AdminForm();
			= new ();
			this.RefreshSelectorData(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest RefreshSelectorData is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void RefreshConfirm()
        {
			AdminForm target = new AdminForm();
			= new ();
			this.Refresh(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest Refresh is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void ReplaceTextConfirm()
        {
			AdminForm target = new AdminForm();
			string find= "find";
			string replace= "replace";
			this.ReplaceText(target, find, replace);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest ReplaceText is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void ReplaceTextConfirm()
        {
			AdminForm target = new AdminForm();
			AdminFormObject o= new AdminFormObject();
			string find= "find";
			string replace= "replace";
			this.ReplaceText(target, AdminFormObject, find, replace);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest ReplaceText is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void SetVisibleRowConfirm()
        {
			AdminForm target = new AdminForm();
			string id= "id";
			bool visible= new bool();
			this.SetVisibleRow(target, id, visible);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest SetVisibleRow is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void SetVisibleConfirm()
        {
			AdminForm target = new AdminForm();
			string id= "id";
			bool visible= new bool();
			this.SetVisible(target, id, visible);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest SetVisible is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormTest))]
        public void SetEnabledConfirm()
        {
			AdminForm target = new AdminForm();
			string id= "id";
			bool visible= new bool();
			this.SetEnabled(target, id, visible);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormTest SetEnabled is not work property");
        }


        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormHelpBoxTest))]
        public void AdminFormHelpBoxConfirm()
        {
			AdminFormHelpBox target = new AdminFormHelpBox();
			= new ();
			this.AdminFormHelpBox(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormHelpBoxTest AdminFormHelpBox is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormHelpBoxTest))]
        public void AdminFormHelpBoxConfirm()
        {
			AdminFormHelpBox target = new AdminFormHelpBox();
			string name= "name";
			string html= "html";
			this.AdminFormHelpBox(target, name, html);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormHelpBoxTest AdminFormHelpBox is not work property");
        }


        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetClickMessageConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string msg= "msg";
			var result = this.SetClickMessage(target, msg);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetClickMessage is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetCommandEventConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			CommandEventHandler evt= new CommandEventHandler();
			var result = this.SetCommandEvent(target, evt);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetCommandEvent is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetEvent1Confirm()
        {
			AdminFormObject target = new AdminFormObject();
			EventHandler evt= new EventHandler();
			var result = this.SetEvent1(target, evt);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetEvent1 is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetGridEventConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			GridViewCommandEventHandler evt= new GridViewCommandEventHandler();
			var result = this.SetGridEvent(target, evt);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetGridEvent is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetEvent2Confirm()
        {
			AdminFormObject target = new AdminFormObject();
			EventHandler evt= new EventHandler();
			var result = this.SetEvent2(target, evt);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetEvent2 is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetHorizontalConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			bool hor= new bool();
			var result = this.SetHorizontal(target, hor);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetHorizontal is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void HelpBoxConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			AdminFormHelpBox box= new AdminFormHelpBox();
			var result = this.HelpBox(target, box);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest HelpBox is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void HelpBoxConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			List<AdminFormHelpBox> boxes= new List<AdminFormHelpBox>();
			var result = this.HelpBox(target, boxes);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest HelpBox is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void IsRequiredConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			bool required= new bool();
			var result = this.IsRequired(target, required);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest IsRequired is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetDefaultConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string def= "def";
			var result = this.SetDefault(target, def);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetDefault is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetDefaultConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			int def= X;
			var result = this.SetDefault(target, def);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetDefault is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetColumnsConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			int col= X;
			var result = this.SetColumns(target, col);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetColumns is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetSelectorValuesConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			AdminFormObject o= new AdminFormObject();
			var result = this.GetSelectorValues(target, o);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetSelectorValues is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetSelectorSelectedItemsConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			AdminFormObject o= new AdminFormObject();
			var result = this.GetSelectorSelectedItems(target, o);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetSelectorSelectedItems is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetSelectorCommandArgConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			AdminFormObject o= new AdminFormObject();
			AdminFormSelectorObject so= new AdminFormSelectorObject();
			var result = this.GetSelectorCommandArg(target, o, so);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetSelectorCommandArg is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void FromSelectorArgConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string value= "value";
			ref string controlID= new ref();
			ref string objectID= new ref();
			this.FromSelectorArg(target, value, string, string);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest FromSelectorArg is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetSelectorIDSConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string value= "value";
			var result = this.GetSelectorIDS(target, value);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetSelectorIDS is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void LoadSelectorResultsConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			AdminFormObject o= new AdminFormObject();
			string items= "items";
			this.LoadSelectorResults(target, o, items);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest LoadSelectorResults is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void LoadSelectorSearchConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			AdminFormObject o= new AdminFormObject();
			List<AdminFormSelectorObject> objects= new List<AdminFormSelectorObject>();
			this.LoadSelectorSearch(target, o, objects);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest LoadSelectorSearch is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetSelectorObjectsConfirm()
        {
			
			string v= "v";
			var result = this.GetSelectorObjects(v);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetSelectorObjects is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void WebControlConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			AdminFormObjectType type= new AdminFormObjectType();
			var result = this.WebControl(target, id, type);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest WebControl is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ControlConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			AdminFormObjectType type= new AdminFormObjectType();
			var result = this.Control(target, id, type);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Control is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SpaceConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			int count= X;
			var result = this.Space(target, count);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Space is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SpaceConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			= new ();
			var result = this.Space(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Space is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void RowConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string title= "title";
			string help= "help";
			var result = this.Row(target, id, title, help);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Row is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void RowConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			= new ();
			var result = this.Row(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Row is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void RowSpanConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			= new ();
			var result = this.RowSpan(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest RowSpan is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void DoubleRowConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string title= "title";
			string help= "help";
			var result = this.DoubleRow(target, id, title, help);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest DoubleRow is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void RowSpanCenterConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			= new ();
			var result = this.RowSpanCenter(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest RowSpanCenter is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void RowSpacerConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			= new ();
			var result = this.RowSpacer(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest RowSpacer is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GridConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string title= "title";
			var result = this.Grid(target, id, title);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Grid is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ColumnConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string field= "field";
			string title= "title";
			DigGridColumnType type= new DigGridColumnType();
			var result = this.Column(target, field, title, type);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Column is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SectionConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string title= "title";
			var result = this.Section(target, id, title);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Section is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SubSectionConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string title= "title";
			var result = this.SubSection(target, id, title);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SubSection is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void TextEditorConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.TextEditor(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest TextEditor is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void PlaceHolderConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.PlaceHolder(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest PlaceHolder is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void MessageConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.Message(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Message is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void TermsConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.Terms(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Terms is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void TermsConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string>> terms= new string>>();
			var result = this.Terms(target, id, terms);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Terms is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ChosenMultiConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.ChosenMulti(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest ChosenMulti is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ChosenMultiConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string>> terms= new string>>();
			var result = this.ChosenMulti(target, id, terms);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest ChosenMulti is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void HiddenFieldConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.HiddenField(target, string);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest HiddenField is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void TextBoxConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			int maxLength= X;
			var result = this.TextBox(target, id, maxLength);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest TextBox is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void TextBoxSecureConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			int maxLength= X;
			var result = this.TextBoxSecure(target, id, maxLength);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest TextBoxSecure is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SearchSelectConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.SearchSelect(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SearchSelect is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void TextBoxBigConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.TextBoxBig(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest TextBoxBig is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void TextBoxConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			int maxLength= X;
			int cols= X;
			var result = this.TextBox(target, id, maxLength, cols);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest TextBox is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void TextAreaConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			int rows= X;
			int cols= X;
			var result = this.TextArea(target, id, rows, cols);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest TextArea is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void TextAreaConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			int maxLength= X;
			int rows= X;
			int cols= X;
			var result = this.TextArea(target, id, maxLength, rows, cols);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest TextArea is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void PasswordConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			int maxLength= X;
			var result = this.Password(target, id, maxLength);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Password is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void DateConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.Date(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Date is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void TimeConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.Time(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Time is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void NumberBoxConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.NumberBox(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest NumberBox is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void NumberBoxConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			int def= X;
			var result = this.NumberBox(target, id, def);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest NumberBox is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void UserConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.User(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest User is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void CheckBoxConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.CheckBox(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest CheckBox is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void DNNUrlConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			DNNUrlType type= new DNNUrlType();
			var result = this.DNNUrl(target, id, type);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest DNNUrl is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void DNNFilePickerConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.DNNFilePicker(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest DNNFilePicker is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void LabelConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string title= "title";
			var result = this.Label(target, id, title);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Label is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void LabelConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string title= "title";
			string cssClass= "cssClass";
			var result = this.Label(target, id, title, cssClass);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Label is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ImageConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string url= "url";
			var result = this.Image(target, id, url);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Image is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ImageUploadConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			EventHandler uploadEvt= new EventHandler();
			EventHandler deleteEvt= new EventHandler();
			var result = this.ImageUpload(target, id, uploadEvt, deleteEvt);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest ImageUpload is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void FileDeleteConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			EventHandler deleteEvt= new EventHandler();
			var result = this.FileDelete(target, id, deleteEvt);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest FileDelete is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GroupConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.Group(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Group is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void LinkButtonConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string title= "title";
			EventHandler evt= new EventHandler();
			var result = this.LinkButton(target, id, title, evt);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest LinkButton is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void LinkButtonNoAjaxConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string title= "title";
			EventHandler evt= new EventHandler();
			SystemImageType type= new SystemImageType();
			var result = this.LinkButtonNoAjax(target, id, title, evt, type);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest LinkButtonNoAjax is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void LinkButtonConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string title= "title";
			EventHandler evt= new EventHandler();
			SystemImageType type= new SystemImageType();
			var result = this.LinkButton(target, id, title, evt, type);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest LinkButton is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void LinkConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string title= "title";
			string url= "url";
			var result = this.Link(target, id, title, url);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Link is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void LinkConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string title= "title";
			string url= "url";
			SystemImageType type= new SystemImageType();
			var result = this.Link(target, id, title, url, type);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Link is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SubViewConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string label= "label";
			var result = this.SubView(target, id, label);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SubView is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SubViewConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string label= "label";
			System.Web.UI.WebControls.View v= new System.Web.UI.WebControls.View();
			var result = this.SubView(target, id, label, v);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SubView is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ViewConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string title= "title";
			string imageUrl= "imageUrl";
			int notifyCount= X;
			var result = this.View(target, id, title, imageUrl, notifyCount);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest View is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ViewConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string title= "title";
			string imageUrl= "imageUrl";
			var result = this.View(target, id, title, imageUrl);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest View is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ViewConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string title= "title";
			string imageUrl= "imageUrl";
			System.Web.UI.WebControls.View v= new System.Web.UI.WebControls.View();
			var result = this.View(target, id, title, imageUrl, v);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest View is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ViewConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string title= "title";
			string imageUrl= "imageUrl";
			System.Web.UI.WebControls.View v= new System.Web.UI.WebControls.View();
			int notifyCount= X;
			var result = this.View(target, id, title, imageUrl, v, notifyCount);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest View is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SelectorConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			IAdminFormSelector sel= new IAdminFormSelector();
			var result = this.Selector(target, id, sel);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Selector is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SMSelectorConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.SMSelector(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SMSelector is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ViewConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string title= "title";
			string imageUrl= "imageUrl";
			string navigateUrl= "navigateUrl";
			var result = this.View(target, id, title, imageUrl, navigateUrl);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest View is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void Select2Confirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.Select2(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Select2 is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ChosenConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.Chosen(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Chosen is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void DropListConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.DropList(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest DropList is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ColorConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.Color(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Color is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void CheckBoxListConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.CheckBoxList(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest CheckBoxList is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void TagControlConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			int sourceID= X;
			var result = this.TagControl(target, id, sourceID);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest TagControl is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void RadioListConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.RadioList(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest RadioList is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ListBoxControlConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string deleteMessage= "deleteMessage";
			var result = this.ListBoxControl(target, id, deleteMessage);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest ListBoxControl is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ListBoxControlConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string deleteMessage= "deleteMessage";
			bool disableDelete= new bool();
			var result = this.ListBoxControl(target, id, deleteMessage, disableDelete);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest ListBoxControl is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void FontConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.Font(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Font is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ItemConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string text= "text";
			string value= "value";
			var result = this.Item(target, text, value);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Item is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ItemConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string text= "text";
			string value= "value";
			string extra1= "extra1";
			var result = this.Item(target, text, value, extra1);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Item is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ItemConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string text= "text";
			string value= "value";
			string help= "help";
			bool showHelp= new bool();
			var result = this.Item(target, text, value, help, showHelp);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Item is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ItemConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string text= "text";
			int value= X;
			var result = this.Item(target, text, value);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Item is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ItemConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string text= "text";
			int value= X;
			string help= "help";
			bool showHelp= new bool();
			var result = this.Item(target, text, value, help, showHelp);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest Item is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetReadOnlyConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			bool readOnly= new bool();
			var result = this.SetReadOnly(target, readOnly);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetReadOnly is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetDataSourceConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			AdminFormDataSource src= new AdminFormDataSource();
			var result = this.SetDataSource(target, src);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetDataSource is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetDataSourceConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			AdminFormDataSource src= new AdminFormDataSource();
			string option1= "option1";
			var result = this.SetDataSource(target, src, option1);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetDataSource is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetDataSourceConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			AdminFormDataSource src= new AdminFormDataSource();
			string option1= "option1";
			string option2= "option2";
			var result = this.SetDataSource(target, src, option1, option2);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetDataSource is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void LoadDataSourceItemsConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			OmnitecModuleBase mb= new OmnitecModuleBase();
			this.LoadDataSourceItems(target, mb);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest LoadDataSourceItems is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ProcessSQLConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			AdminFormObject om= new AdminFormObject();
			ref Dictionary<string= new ref();
			string> values= new string>();
			this.ProcessSQL(target, om, Dictionary<string, values);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest ProcessSQL is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetFormValuesConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			= new ();
			var result = this.GetFormValues(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetFormValues is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetFormConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			= new ();
			var result = this.GetForm(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetForm is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetCurrentControlRowConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			= new ();
			var result = this.GetCurrentControlRow(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetCurrentControlRow is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetPostBackMethodConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string cmdID= "cmdID";
			this.SetPostBackMethod(target, cmdID);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetPostBackMethod is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetParentObjectConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			AdminFormObjectType type= new AdminFormObjectType();
			var result = this.GetParentObject(target, type);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetParentObject is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetObjectConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.GetObject(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetObject is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void DumpControlsConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			int level= X;
			this.DumpControls(target, level);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest DumpControls is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetMainControlConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.GetMainControl(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetMainControl is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetControlObjectConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.GetControlObject(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetControlObject is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetTagSourceValueConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			int sourceID= X;
			this.SetTagSourceValue(target, id, sourceID);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetTagSourceValue is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetValueConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			bool value= new bool();
			this.SetValue(target, id, value);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetValue is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetValueConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			DateTime? date= new DateTime?();
			this.SetValue(target, id, date);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetValue is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetValueConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			DateTime date= DateTime.Now;
			this.SetValue(target, id, date);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetValue is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetMessageConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			MessageType type= new MessageType();
			string msg= "msg";
			this.SetMessage(target, id, type, msg);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetMessage is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ClearMessageConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			this.ClearMessage(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest ClearMessage is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetValueConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			int value= X;
			this.SetValue(target, id, value);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetValue is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetValueConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			decimal value= new decimal();
			this.SetValue(target, id, value);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetValue is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetValueConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string value= "value";
			this.SetValue(target, id, value);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetValue is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetValueBaseConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string value= "value";
			Control h= new Control();
			this.SetValueBase(target, id, value, h);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetValueBase is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetGridRowIDConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			int row= X;
			var result = this.GetGridRowID(target, id, row);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetGridRowID is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetEnumConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			Type enumType= new Type();
			var result = this.GetEnum(target, id, enumType);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetEnum is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetEnumConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			Type enumType= new Type();
			object def= new object();
			var result = this.GetEnum(target, id, enumType, def);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetEnum is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetValueIntConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.GetValueInt(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetValueInt is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetValueDecimalConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.GetValueDecimal(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetValueDecimal is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetValueBoolConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.GetValueBool(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetValueBool is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetValueDateConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.GetValueDate(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetValueDate is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetValueDateNullConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.GetValueDateNull(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetValueDateNull is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void HasValueConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.HasValue(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest HasValue is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetValueTimeNullConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.GetValueTimeNull(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetValueTimeNull is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetValueTimeConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.GetValueTime(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetValueTime is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetValueStringConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.GetValueString(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetValueString is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetValueBaseConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			Control h= new Control();
			var result = this.GetValueBase(target, id, h);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetValueBase is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetItemVisibleConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			int value= X;
			bool visible= new bool();
			this.SetItemVisible(target, id, value, visible);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetItemVisible is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetItemVisibleConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string value= "value";
			bool visible= new bool();
			this.SetItemVisible(target, id, value, visible);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetItemVisible is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void IsVisibleConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			var result = this.IsVisible(target, id);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest IsVisible is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void RefreshDirectoriesConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			= new ();
			this.RefreshDirectories(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest RefreshDirectories is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void RefreshDirectoriesConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			AdminFormObject parent= new AdminFormObject();
			this.RefreshDirectories(target, parent);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest RefreshDirectories is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void RefreshToolbarConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			OmnitecModuleBase p= new OmnitecModuleBase();
			this.RefreshToolbar(target, p);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest RefreshToolbar is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void CreateToolbarConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			OmnitecModuleBase p= new OmnitecModuleBase();
			this.CreateToolbar(target, p);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest CreateToolbar is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SelectActiveToolbarConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			= new ();
			this.SelectActiveToolbar(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SelectActiveToolbar is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void SetActiveViewConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			AdminFormObject v= new AdminFormObject();
			this.SetActiveView(target, v);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest SetActiveView is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void cmdToolbar_ClickConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			object sender= new object();
			ImageClickEventArgs e= new ImageClickEventArgs();
			this.cmdToolbar_Click(target, sender, e);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest cmdToolbar_Click is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void cmdToolbarLink_ClickConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			object sender= new object();
			EventArgs e= new EventArgs();
			this.cmdToolbarLink_Click(target, sender, e);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest cmdToolbarLink_Click is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetViewCountConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			= new ();
			var result = this.GetViewCount(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetViewCount is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ResourceStringConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			OmnitecModuleBase p= new OmnitecModuleBase();
			string s= "s";
			var result = this.ResourceString(target, p, s);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest ResourceString is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetResourceStringConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			OmnitecModuleBase p= new OmnitecModuleBase();
			string s= "s";
			var result = this.GetResourceString(target, p, s);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetResourceString is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void CreateToolBarItemConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			OmnitecModuleBase p= new OmnitecModuleBase();
			Control h= new Control();
			Control sub= new Control();
			this.CreateToolBarItem(target, p, h, sub);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest CreateToolBarItem is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void CreateListItemConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			AdminFormObject o= new AdminFormObject();
			var result = this.CreateListItem(target, o);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest CreateListItem is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void RemoveBlankRowsConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			= new ();
			this.RemoveBlankRows(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest RemoveBlankRows is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void CreateFormControlsConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			= new ();
			this.CreateFormControls(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest CreateFormControls is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ParseControlsConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			Control ctrls= new Control();
			OmnitecModuleBase p= new OmnitecModuleBase();
			this.ParseControls(target, ctrls, p);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest ParseControls is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ParseControlsSubConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			Control ctrls= new Control();
			ref StringBuilder sb= new ref();
			this.ParseControlsSub(target, ctrls, StringBuilder);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest ParseControlsSub is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetTextConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			= new ();
			var result = this.GetText(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetText is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetClickTextConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			= new ();
			var result = this.GetClickText(target, );
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetClickText is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetTextConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			OmnitecModuleBase mb= new OmnitecModuleBase();
			var result = this.GetText(target, mb);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetText is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void GetHelpTextConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			OmnitecModuleBase mb= new OmnitecModuleBase();
			var result = this.GetHelpText(target, mb);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest GetHelpText is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void AdminButtonEventConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			object sender= new object();
			CommandEventArgs e= new CommandEventArgs();
			this.AdminButtonEvent(target, sender, e);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest AdminButtonEvent is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void FixStringConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string s= "s";
			var result = this.FixString(target, s);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest FixString is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void CreateResxSubConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			AdminFormObject om= new AdminFormObject();
			StringBuilder sb= new StringBuilder();
			this.CreateResxSub(target, om, sb);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest CreateResxSub is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void CreateResxConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			OmnitecModuleBase p= new OmnitecModuleBase();
			this.CreateResx(target, p);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest CreateResx is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void CreateDocsSubConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			AdminFormObject om= new AdminFormObject();
			StringBuilder sb= new StringBuilder();
			int tabs= X;
			this.CreateDocsSub(target, om, sb, tabs);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest CreateDocsSub is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void CreateDocsConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			OmnitecModuleBase p= new OmnitecModuleBase();
			this.CreateDocs(target, p);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest CreateDocs is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void CreateImageButtonConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string command= "command";
			string commandArg= "commandArg";
			CommandEventHandler evt= new CommandEventHandler();
			DefaultImages img= new DefaultImages();
			var result = this.CreateImageButton(target, id, command, commandArg, evt, img);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest CreateImageButton is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void CreateImageButtonConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string id= "id";
			string command= "command";
			string commandArg= "commandArg";
			CommandEventHandler evt= new CommandEventHandler();
			string imageUrl= "imageUrl";
			var result = this.CreateImageButton(target, id, command, commandArg, evt, imageUrl);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest CreateImageButton is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void ShowDividerConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			string c= "c";
			bool show= new bool();
			this.ShowDivider(target, c, show);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest ShowDivider is not work property");
        }

        [TestMethod]
        [PexGeneratedBy(typeof(AdminFormObjectTest))]
        public void CreateControlsConfirm()
        {
			AdminFormObject target = new AdminFormObject();
			OmnitecModuleBase p= new OmnitecModuleBase();
			Control h= new Control();
			StringBuilder sbJS= new StringBuilder();
			bool isDouble = new bool();
			this.CreateControls(target, p, h, sbJS, isDouble);
            Assert.AreEqual((string)testStorage[""], "", "AdminFormObjectTest CreateControls is not work property");
        }


classfile
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.Pex.Framework;
using Microsoft.Pex.Framework.Validation;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SharedLibrary.Test;
using System;
using System.Collections.Generic;

namespace SharedLibrary.Common.Tests
{
    [TestClass]
    [PexClass(typeof(AdminFormNavTest))]
    [PexAllowedExceptionFromTypeUnderTest(typeof(ArgumentException), AcceptExceptionSubtypes = true)]
    [PexAllowedExceptionFromTypeUnderTest(typeof(InvalidOperationException))]
    public partial class AdminFormNavTest
    {
        protected static IDisposable Context { get; set; }
        protected static Dictionary<string, object> testStorage = new Dictionary<string, object>()
        { };

        [ClassInitialize]
        public static void ClassInitialize(TestContext testContext)
        { }

        [ClassCleanup]
        public static void ClassCleanup()
        { }

        [TestInitialize()]
        public void PreTest()
        {
            // Create ShimsContext
            Context = ShimsContext.Create();
            //TestLibrary.DNNFakes.Initialize();
            //TestLibrary.SystemFakes.Initialize();
            //TestLibrary.SharedLibraryFakes.Initialize();

            CommonFakes.Initialize();
        }

        [TestCleanup()]
        public void PostTest()
        {
            Context.Dispose();
            Context = null;
        }

		[PexMethod]
		public void Set(AdminFormNav target,OmnitecModuleBase b )
		{
			target.Set(b);
		}
		[PexMethod]
		public void Get(AdminFormNav target,OmnitecModuleBase b )
		{
			target.Get(b);
		}

	}
}
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.Pex.Framework;
using Microsoft.Pex.Framework.Validation;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SharedLibrary.Test;
using System;
using System.Collections.Generic;

namespace SharedLibrary.Common.Tests
{
    [TestClass]
    [PexClass(typeof(AdminFormSelectorObjectTest))]
    [PexAllowedExceptionFromTypeUnderTest(typeof(ArgumentException), AcceptExceptionSubtypes = true)]
    [PexAllowedExceptionFromTypeUnderTest(typeof(InvalidOperationException))]
    public partial class AdminFormSelectorObjectTest
    {
        protected static IDisposable Context { get; set; }
        protected static Dictionary<string, object> testStorage = new Dictionary<string, object>()
        { };

        [ClassInitialize]
        public static void ClassInitialize(TestContext testContext)
        { }

        [ClassCleanup]
        public static void ClassCleanup()
        { }

        [TestInitialize()]
        public void PreTest()
        {
            // Create ShimsContext
            Context = ShimsContext.Create();
            //TestLibrary.DNNFakes.Initialize();
            //TestLibrary.SystemFakes.Initialize();
            //TestLibrary.SharedLibraryFakes.Initialize();

            CommonFakes.Initialize();
        }

        [TestCleanup()]
        public void PostTest()
        {
            Context.Dispose();
            Context = null;
        }

		[PexMethod]
		public void AdminFormSelectorObject(AdminFormSelectorObject target, )
		{
			target.AdminFormSelectorObject();
		}
		[PexMethod]
		public void AdminFormSelectorObject(AdminFormSelectorObject target,string value )
		{
			target.AdminFormSelectorObject(value);
		}

	}
}
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.Pex.Framework;
using Microsoft.Pex.Framework.Validation;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SharedLibrary.Test;
using System;
using System.Collections.Generic;

namespace SharedLibrary.Common.Tests
{
    [TestClass]
    [PexClass(typeof(AdminFormTest))]
    [PexAllowedExceptionFromTypeUnderTest(typeof(ArgumentException), AcceptExceptionSubtypes = true)]
    [PexAllowedExceptionFromTypeUnderTest(typeof(InvalidOperationException))]
    public partial class AdminFormTest
    {
        protected static IDisposable Context { get; set; }
        protected static Dictionary<string, object> testStorage = new Dictionary<string, object>()
        { };

        [ClassInitialize]
        public static void ClassInitialize(TestContext testContext)
        { }

        [ClassCleanup]
        public static void ClassCleanup()
        { }

        [TestInitialize()]
        public void PreTest()
        {
            // Create ShimsContext
            Context = ShimsContext.Create();
            //TestLibrary.DNNFakes.Initialize();
            //TestLibrary.SystemFakes.Initialize();
            //TestLibrary.SharedLibraryFakes.Initialize();

            CommonFakes.Initialize();
        }

        [TestCleanup()]
        public void PostTest()
        {
            Context.Dispose();
            Context = null;
        }

		[PexMethod]
		public void AdminForm(AdminForm target,OmnitecModuleBase basep,MultiView mainView,Control toolbar )
		{
			target.AdminForm(basep, mainView, toolbar);
		}
		[PexMethod]
		public void AdminForm(AdminForm target,OmnitecModuleBase basep,MultiView mainView,Control toolbar,Control leftNav )
		{
			target.AdminForm(basep, mainView, toolbar, leftNav);
		}
		[PexMethod]
		public void SaveObjectData(AdminForm target,int moduleID,AdminFormObject o,ref DNNModuleSettings h )
		{
			target.SaveObjectData(moduleID, o, DNNModuleSettings);
		}
		[PexMethod]
		public void SaveDataRecursive(AdminForm target,int moduleID,AdminFormObject om,ref DNNModuleSettings hlp )
		{
			target.SaveDataRecursive(moduleID, om, DNNModuleSettings);
		}
		[PexMethod]
		public void SaveData(AdminForm target,int moduleID )
		{
			target.SaveData(moduleID);
		}
		[PexMethod]
		public void SetNav(AdminForm target,string view,bool force )
		{
			target.SetNav(view, force);
		}
		[PexMethod]
		public void SetNav(AdminForm target,string view,int key,int sel1,int sel2,int page,string string1 )
		{
			target.SetNav(view, key, sel1, sel2, page, string1);
		}
		[PexMethod]
		public int GetNavKey(AdminForm target, )
		{
			return target.GetNavKey();
		}
		[PexMethod]
		public int GetNavSel1(AdminForm target, )
		{
			return target.GetNavSel1();
		}
		[PexMethod]
		public int GetNavSel2(AdminForm target, )
		{
			return target.GetNavSel2();
		}
		[PexMethod]
		public int GetNavPage(AdminForm target, )
		{
			return target.GetNavPage();
		}
		[PexMethod]
		public string GetNavView(AdminForm target, )
		{
			return target.GetNavView();
		}
		[PexMethod]
		public bool GetNavForceNext(AdminForm target, )
		{
			return target.GetNavForceNext();
		}
		[PexMethod]
		public void LoadObjectData(AdminForm target,int moduleID,AdminFormObject o )
		{
			target.LoadObjectData(moduleID, o);
		}
		[PexMethod]
		public void LoadDataRecursive(AdminForm target,int moduleID,AdminFormObject om )
		{
			target.LoadDataRecursive(moduleID, om);
		}
		[PexMethod]
		public void LoadData(AdminForm target,int moduleID )
		{
			target.LoadData(moduleID);
		}
		[PexMethod]
		public void RefreshSelectorControls(AdminForm target, )
		{
			target.RefreshSelectorControls();
		}
		[PexMethod]
		public void RefreshSelectorData(AdminForm target, )
		{
			target.RefreshSelectorData();
		}
		[PexMethod]
		public void Refresh(AdminForm target, )
		{
			target.Refresh();
		}
		[PexMethod]
		public void ReplaceText(AdminForm target,string find,string replace  )
		{
			target.ReplaceText(find, replace);
		}
		[PexMethod]
		public void ReplaceText(AdminForm target, AdminFormObject o,string find,string replace )
		{
			target.ReplaceText(AdminFormObject, find, replace);
		}
		[PexMethod]
		public void SetVisibleRow(AdminForm target,string id,bool visible )
		{
			target.SetVisibleRow(id, visible);
		}
		[PexMethod]
		public void SetVisible(AdminForm target,string id,bool visible )
		{
			target.SetVisible(id, visible);
		}
		[PexMethod]
		public void SetEnabled(AdminForm target,string id,bool visible )
		{
			target.SetEnabled(id, visible);
		}

	}
}
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.Pex.Framework;
using Microsoft.Pex.Framework.Validation;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SharedLibrary.Test;
using System;
using System.Collections.Generic;

namespace SharedLibrary.Common.Tests
{
    [TestClass]
    [PexClass(typeof(AdminFormHelpBoxTest))]
    [PexAllowedExceptionFromTypeUnderTest(typeof(ArgumentException), AcceptExceptionSubtypes = true)]
    [PexAllowedExceptionFromTypeUnderTest(typeof(InvalidOperationException))]
    public partial class AdminFormHelpBoxTest
    {
        protected static IDisposable Context { get; set; }
        protected static Dictionary<string, object> testStorage = new Dictionary<string, object>()
        { };

        [ClassInitialize]
        public static void ClassInitialize(TestContext testContext)
        { }

        [ClassCleanup]
        public static void ClassCleanup()
        { }

        [TestInitialize()]
        public void PreTest()
        {
            // Create ShimsContext
            Context = ShimsContext.Create();
            //TestLibrary.DNNFakes.Initialize();
            //TestLibrary.SystemFakes.Initialize();
            //TestLibrary.SharedLibraryFakes.Initialize();

            CommonFakes.Initialize();
        }

        [TestCleanup()]
        public void PostTest()
        {
            Context.Dispose();
            Context = null;
        }

		[PexMethod]
		public void AdminFormHelpBox(AdminFormHelpBox target, )
		{
			target.AdminFormHelpBox();
		}
		[PexMethod]
		public void AdminFormHelpBox(AdminFormHelpBox target,string name,string html )
		{
			target.AdminFormHelpBox(name, html);
		}

	}
}
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.Pex.Framework;
using Microsoft.Pex.Framework.Validation;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SharedLibrary.Test;
using System;
using System.Collections.Generic;

namespace SharedLibrary.Common.Tests
{
    [TestClass]
    [PexClass(typeof(AdminFormObjectTest))]
    [PexAllowedExceptionFromTypeUnderTest(typeof(ArgumentException), AcceptExceptionSubtypes = true)]
    [PexAllowedExceptionFromTypeUnderTest(typeof(InvalidOperationException))]
    public partial class AdminFormObjectTest
    {
        protected static IDisposable Context { get; set; }
        protected static Dictionary<string, object> testStorage = new Dictionary<string, object>()
        { };

        [ClassInitialize]
        public static void ClassInitialize(TestContext testContext)
        { }

        [ClassCleanup]
        public static void ClassCleanup()
        { }

        [TestInitialize()]
        public void PreTest()
        {
            // Create ShimsContext
            Context = ShimsContext.Create();
            //TestLibrary.DNNFakes.Initialize();
            //TestLibrary.SystemFakes.Initialize();
            //TestLibrary.SharedLibraryFakes.Initialize();

            CommonFakes.Initialize();
        }

        [TestCleanup()]
        public void PostTest()
        {
            Context.Dispose();
            Context = null;
        }

		[PexMethod]
		public AdminFormObject SetClickMessage(AdminFormObject target,string msg )
		{
			return target.SetClickMessage(msg);
		}
		[PexMethod]
		public AdminFormObject SetCommandEvent(AdminFormObject target,CommandEventHandler evt )
		{
			return target.SetCommandEvent(evt);
		}
		[PexMethod]
		public AdminFormObject SetEvent1(AdminFormObject target,EventHandler evt )
		{
			return target.SetEvent1(evt);
		}
		[PexMethod]
		public AdminFormObject SetGridEvent(AdminFormObject target,GridViewCommandEventHandler evt )
		{
			return target.SetGridEvent(evt);
		}
		[PexMethod]
		public AdminFormObject SetEvent2(AdminFormObject target,EventHandler evt )
		{
			return target.SetEvent2(evt);
		}
		[PexMethod]
		public AdminFormObject SetHorizontal(AdminFormObject target,bool hor )
		{
			return target.SetHorizontal(hor);
		}
		[PexMethod]
		public AdminFormObject HelpBox(AdminFormObject target,AdminFormHelpBox box )
		{
			return target.HelpBox(box);
		}
		[PexMethod]
		public AdminFormObject HelpBox(AdminFormObject target,List<AdminFormHelpBox> boxes )
		{
			return target.HelpBox(boxes);
		}
		[PexMethod]
		public AdminFormObject IsRequired(AdminFormObject target,bool required )
		{
			return target.IsRequired(required);
		}
		[PexMethod]
		public AdminFormObject SetDefault(AdminFormObject target,string def )
		{
			return target.SetDefault(def);
		}
		[PexMethod]
		public AdminFormObject SetDefault(AdminFormObject target,int def )
		{
			return target.SetDefault(def);
		}
		[PexMethod]
		public AdminFormObject SetColumns(AdminFormObject target,int col )
		{
			return target.SetColumns(col);
		}
		[PexMethod]
		public AdminFormSelectorSelected GetSelectorValues(AdminFormObject target,AdminFormObject o )
		{
			return target.GetSelectorValues(o);
		}
		[PexMethod]
		public string GetSelectorSelectedItems(AdminFormObject target,AdminFormObject o )
		{
			return target.GetSelectorSelectedItems(o);
		}
		[PexMethod]
		public string GetSelectorCommandArg(AdminFormObject target,AdminFormObject o,AdminFormSelectorObject so )
		{
			return target.GetSelectorCommandArg(o, so);
		}
		[PexMethod]
		public void FromSelectorArg(AdminFormObject target,string value,ref string controlID,ref string objectID )
		{
			target.FromSelectorArg(value, string, string);
		}
		[PexMethod]
		public string[] GetSelectorIDS(AdminFormObject target,string value )
		{
			return target.GetSelectorIDS(value);
		}
		[PexMethod]
		public void LoadSelectorResults(AdminFormObject target,AdminFormObject o,string items )
		{
			target.LoadSelectorResults(o, items);
		}
		[PexMethod]
		public void LoadSelectorSearch(AdminFormObject target,AdminFormObject o,List<AdminFormSelectorObject> objects )
		{
			target.LoadSelectorSearch(o, objects);
		}
		[PexMethod]
		public List<AdminFormSelectorObject> GetSelectorObjects(string v )
		{
			return AdminFormObject.GetSelectorObjects(v);
		}
		[PexMethod]
		public AdminFormObject WebControl(AdminFormObject target,string id,AdminFormObjectType type )
		{
			return target.WebControl(id, type);
		}
		[PexMethod]
		public AdminFormObject Control(AdminFormObject target,string id,AdminFormObjectType type )
		{
			return target.Control(id, type);
		}
		[PexMethod]
		public AdminFormObject Space(AdminFormObject target,int count )
		{
			return target.Space(count);
		}
		[PexMethod]
		public AdminFormObject Space(AdminFormObject target, )
		{
			return target.Space();
		}
		[PexMethod]
		public AdminFormObject Row(AdminFormObject target,string id,string title,string help )
		{
			return target.Row(id, title, help);
		}
		[PexMethod]
		public AdminFormObject Row(AdminFormObject target, )
		{
			return target.Row();
		}
		[PexMethod]
		public AdminFormObject RowSpan(AdminFormObject target, )
		{
			return target.RowSpan();
		}
		[PexMethod]
		public AdminFormObject DoubleRow(AdminFormObject target,string id,string title,string help )
		{
			return target.DoubleRow(id, title, help);
		}
		[PexMethod]
		public AdminFormObject RowSpanCenter(AdminFormObject target, )
		{
			return target.RowSpanCenter();
		}
		[PexMethod]
		public AdminFormObject RowSpacer(AdminFormObject target, )
		{
			return target.RowSpacer();
		}
		[PexMethod]
		public AdminFormObject Grid(AdminFormObject target,string id,string title )
		{
			return target.Grid(id, title);
		}
		[PexMethod]
		public AdminFormObject Column(AdminFormObject target,string field,string title,DigGridColumnType type )
		{
			return target.Column(field, title, type);
		}
		[PexMethod]
		public AdminFormObject Section(AdminFormObject target,string id,string title )
		{
			return target.Section(id, title);
		}
		[PexMethod]
		public AdminFormObject SubSection(AdminFormObject target,string id,string title )
		{
			return target.SubSection(id, title);
		}
		[PexMethod]
		public AdminFormObject TextEditor(AdminFormObject target,string id )
		{
			return target.TextEditor(id);
		}
		[PexMethod]
		public AdminFormObject PlaceHolder(AdminFormObject target,string id )
		{
			return target.PlaceHolder(id);
		}
		[PexMethod]
		public AdminFormObject Message(AdminFormObject target,string id )
		{
			return target.Message(id);
		}
		[PexMethod]
		public AdminFormObject Terms(AdminFormObject target,string id )
		{
			return target.Terms(id);
		}
		[PexMethod]
		public AdminFormObject Terms(AdminFormObject target,string id,List<Tuple<int,string>> terms )
		{
			return target.Terms(id, terms);
		}
		[PexMethod]
		public AdminFormObject ChosenMulti(AdminFormObject target,string id )
		{
			return target.ChosenMulti(id);
		}
		[PexMethod]
		public AdminFormObject ChosenMulti(AdminFormObject target,string id,List<Tuple<int,string>> terms )
		{
			return target.ChosenMulti(id, terms);
		}
		[PexMethod]
		public AdminFormObject HiddenField(AdminFormObject target, string id  )
		{
			return target.HiddenField(string);
		}
		[PexMethod]
		public AdminFormObject TextBox(AdminFormObject target,string id,int maxLength )
		{
			return target.TextBox(id, maxLength);
		}
		[PexMethod]
		public AdminFormObject TextBoxSecure(AdminFormObject target,string id,int maxLength )
		{
			return target.TextBoxSecure(id, maxLength);
		}
		[PexMethod]
		public AdminFormObject SearchSelect(AdminFormObject target,string id )
		{
			return target.SearchSelect(id);
		}
		[PexMethod]
		public AdminFormObject TextBoxBig(AdminFormObject target,string id )
		{
			return target.TextBoxBig(id);
		}
		[PexMethod]
		public AdminFormObject TextBox(AdminFormObject target,string id,int maxLength,int cols )
		{
			return target.TextBox(id, maxLength, cols);
		}
		[PexMethod]
		public AdminFormObject TextArea(AdminFormObject target,string id,int rows,int cols )
		{
			return target.TextArea(id, rows, cols);
		}
		[PexMethod]
		public AdminFormObject TextArea(AdminFormObject target,string id,int maxLength,int rows,int cols )
		{
			return target.TextArea(id, maxLength, rows, cols);
		}
		[PexMethod]
		public AdminFormObject Password(AdminFormObject target,string id,int maxLength )
		{
			return target.Password(id, maxLength);
		}
		[PexMethod]
		public AdminFormObject Date(AdminFormObject target,string id )
		{
			return target.Date(id);
		}
		[PexMethod]
		public AdminFormObject Time(AdminFormObject target,string id )
		{
			return target.Time(id);
		}
		[PexMethod]
		public AdminFormObject NumberBox(AdminFormObject target,string id )
		{
			return target.NumberBox(id);
		}
		[PexMethod]
		public AdminFormObject NumberBox(AdminFormObject target,string id,int def )
		{
			return target.NumberBox(id, def);
		}
		[PexMethod]
		public AdminFormObject User(AdminFormObject target,string id )
		{
			return target.User(id);
		}
		[PexMethod]
		public AdminFormObject CheckBox(AdminFormObject target,string id )
		{
			return target.CheckBox(id);
		}
		[PexMethod]
		public AdminFormObject DNNUrl(AdminFormObject target,string id,DNNUrlType type )
		{
			return target.DNNUrl(id, type);
		}
		[PexMethod]
		public AdminFormObject DNNFilePicker(AdminFormObject target,string id )
		{
			return target.DNNFilePicker(id);
		}
		[PexMethod]
		public AdminFormObject Label(AdminFormObject target,string id,string title )
		{
			return target.Label(id, title);
		}
		[PexMethod]
		public AdminFormObject Label(AdminFormObject target,string id,string title,string cssClass )
		{
			return target.Label(id, title, cssClass);
		}
		[PexMethod]
		public AdminFormObject Image(AdminFormObject target,string id,string url )
		{
			return target.Image(id, url);
		}
		[PexMethod]
		public AdminFormObject ImageUpload(AdminFormObject target,string id,EventHandler uploadEvt,EventHandler deleteEvt )
		{
			return target.ImageUpload(id, uploadEvt, deleteEvt);
		}
		[PexMethod]
		public AdminFormObject FileDelete(AdminFormObject target,string id,EventHandler deleteEvt )
		{
			return target.FileDelete(id, deleteEvt);
		}
		[PexMethod]
		public AdminFormObject Group(AdminFormObject target,string id )
		{
			return target.Group(id);
		}
		[PexMethod]
		public AdminFormObject LinkButton(AdminFormObject target,string id,string title,EventHandler evt )
		{
			return target.LinkButton(id, title, evt);
		}
		[PexMethod]
		public AdminFormObject LinkButtonNoAjax(AdminFormObject target,string id,string title,EventHandler evt,SystemImageType type )
		{
			return target.LinkButtonNoAjax(id, title, evt, type);
		}
		[PexMethod]
		public AdminFormObject LinkButton(AdminFormObject target,string id,string title,EventHandler evt,SystemImageType type )
		{
			return target.LinkButton(id, title, evt, type);
		}
		[PexMethod]
		public AdminFormObject Link(AdminFormObject target,string id,string title,string url )
		{
			return target.Link(id, title, url);
		}
		[PexMethod]
		public AdminFormObject Link(AdminFormObject target,string id,string title,string url,SystemImageType type )
		{
			return target.Link(id, title, url, type);
		}
		[PexMethod]
		public AdminFormObject SubView(AdminFormObject target,string id,string label )
		{
			return target.SubView(id, label);
		}
		[PexMethod]
		public AdminFormObject SubView(AdminFormObject target,string id,string label,System.Web.UI.WebControls.View v )
		{
			return target.SubView(id, label, v);
		}
		[PexMethod]
		public AdminFormObject View(AdminFormObject target,string id,string title,string imageUrl,int notifyCount )
		{
			return target.View(id, title, imageUrl, notifyCount);
		}
		[PexMethod]
		public AdminFormObject View(AdminFormObject target,string id,string title,string imageUrl )
		{
			return target.View(id, title, imageUrl);
		}
		[PexMethod]
		public AdminFormObject View(AdminFormObject target,string id,string title,string imageUrl,System.Web.UI.WebControls.View v )
		{
			return target.View(id, title, imageUrl, v);
		}
		[PexMethod]
		public AdminFormObject View(AdminFormObject target,string id,string title,string imageUrl,System.Web.UI.WebControls.View v,int notifyCount )
		{
			return target.View(id, title, imageUrl, v, notifyCount);
		}
		[PexMethod]
		public AdminFormObject Selector(AdminFormObject target,string id,IAdminFormSelector sel )
		{
			return target.Selector(id, sel);
		}
		[PexMethod]
		public AdminFormObject SMSelector(AdminFormObject target,string id )
		{
			return target.SMSelector(id);
		}
		[PexMethod]
		public AdminFormObject View(AdminFormObject target,string id,string title,string imageUrl,string navigateUrl )
		{
			return target.View(id, title, imageUrl, navigateUrl);
		}
		[PexMethod]
		public AdminFormObject Select2(AdminFormObject target,string id )
		{
			return target.Select2(id);
		}
		[PexMethod]
		public AdminFormObject Chosen(AdminFormObject target,string id )
		{
			return target.Chosen(id);
		}
		[PexMethod]
		public AdminFormObject DropList(AdminFormObject target,string id )
		{
			return target.DropList(id);
		}
		[PexMethod]
		public AdminFormObject Color(AdminFormObject target,string id )
		{
			return target.Color(id);
		}
		[PexMethod]
		public AdminFormObject CheckBoxList(AdminFormObject target,string id )
		{
			return target.CheckBoxList(id);
		}
		[PexMethod]
		public AdminFormObject TagControl(AdminFormObject target,string id,int sourceID )
		{
			return target.TagControl(id, sourceID);
		}
		[PexMethod]
		public AdminFormObject RadioList(AdminFormObject target,string id )
		{
			return target.RadioList(id);
		}
		[PexMethod]
		public AdminFormObject ListBoxControl(AdminFormObject target,string id,string deleteMessage )
		{
			return target.ListBoxControl(id, deleteMessage);
		}
		[PexMethod]
		public AdminFormObject ListBoxControl(AdminFormObject target,string id,string deleteMessage,bool disableDelete )
		{
			return target.ListBoxControl(id, deleteMessage, disableDelete);
		}
		[PexMethod]
		public AdminFormObject Font(AdminFormObject target,string id )
		{
			return target.Font(id);
		}
		[PexMethod]
		public AdminFormObject Item(AdminFormObject target,string text,string value )
		{
			return target.Item(text, value);
		}
		[PexMethod]
		public AdminFormObject Item(AdminFormObject target,string text,string value,string extra1 )
		{
			return target.Item(text, value, extra1);
		}
		[PexMethod]
		public AdminFormObject Item(AdminFormObject target,string text,string value,string help,bool showHelp )
		{
			return target.Item(text, value, help, showHelp);
		}
		[PexMethod]
		public AdminFormObject Item(AdminFormObject target,string text,int value )
		{
			return target.Item(text, value);
		}
		[PexMethod]
		public AdminFormObject Item(AdminFormObject target,string text,int value,string help,bool showHelp )
		{
			return target.Item(text, value, help, showHelp);
		}
		[PexMethod]
		public AdminFormObject SetReadOnly(AdminFormObject target,bool readOnly )
		{
			return target.SetReadOnly(readOnly);
		}
		[PexMethod]
		public AdminFormObject SetDataSource(AdminFormObject target,AdminFormDataSource src )
		{
			return target.SetDataSource(src);
		}
		[PexMethod]
		public AdminFormObject SetDataSource(AdminFormObject target,AdminFormDataSource src,string option1 )
		{
			return target.SetDataSource(src, option1);
		}
		[PexMethod]
		public AdminFormObject SetDataSource(AdminFormObject target,AdminFormDataSource src,string option1,string option2 )
		{
			return target.SetDataSource(src, option1, option2);
		}
		[PexMethod]
		public void LoadDataSourceItems(AdminFormObject target,OmnitecModuleBase mb )
		{
			target.LoadDataSourceItems(mb);
		}
		[PexMethod]
		public void ProcessSQL(AdminFormObject target,AdminFormObject om,ref Dictionary<string,string> values )
		{
			target.ProcessSQL(om, Dictionary<string, values);
		}
		[PexMethod]
		public Dictionary<stringstring> GetFormValues(AdminFormObject target, )
		{
			return target.GetFormValues();
		}
		[PexMethod]
		public AdminForm GetForm(AdminFormObject target, )
		{
			return target.GetForm();
		}
		[PexMethod]
		public AdminFormObject GetCurrentControlRow(AdminFormObject target, )
		{
			return target.GetCurrentControlRow();
		}
		[PexMethod]
		public void SetPostBackMethod(AdminFormObject target,string cmdID )
		{
			target.SetPostBackMethod(cmdID);
		}
		[PexMethod]
		public AdminFormObject GetParentObject(AdminFormObject target,AdminFormObjectType type )
		{
			return target.GetParentObject(type);
		}
		[PexMethod]
		public AdminFormObject GetObject(AdminFormObject target,string id )
		{
			return target.GetObject(id);
		}
		[PexMethod]
		public void DumpControls(AdminFormObject target,int level )
		{
			target.DumpControls(level);
		}
		[PexMethod]
		public Control GetMainControl(AdminFormObject target,string id )
		{
			return target.GetMainControl(id);
		}
		[PexMethod]
		public AdminFormObject GetControlObject(AdminFormObject target,string id )
		{
			return target.GetControlObject(id);
		}
		[PexMethod]
		public void SetTagSourceValue(AdminFormObject target,string id,int sourceID )
		{
			target.SetTagSourceValue(id, sourceID);
		}
		[PexMethod]
		public void SetValue(AdminFormObject target,string id,bool value )
		{
			target.SetValue(id, value);
		}
		[PexMethod]
		public void SetValue(AdminFormObject target,string id,DateTime? date )
		{
			target.SetValue(id, date);
		}
		[PexMethod]
		public void SetValue(AdminFormObject target,string id,DateTime date )
		{
			target.SetValue(id, date);
		}
		[PexMethod]
		public void SetMessage(AdminFormObject target,string id,MessageType type,string msg )
		{
			target.SetMessage(id, type, msg);
		}
		[PexMethod]
		public void ClearMessage(AdminFormObject target,string id )
		{
			target.ClearMessage(id);
		}
		[PexMethod]
		public void SetValue(AdminFormObject target,string id,int value )
		{
			target.SetValue(id, value);
		}
		[PexMethod]
		public void SetValue(AdminFormObject target,string id,decimal value )
		{
			target.SetValue(id, value);
		}
		[PexMethod]
		public void SetValue(AdminFormObject target,string id,string value )
		{
			target.SetValue(id, value);
		}
		[PexMethod]
		public void SetValueBase(AdminFormObject target,string id,string value,Control h )
		{
			target.SetValueBase(id, value, h);
		}
		[PexMethod]
		public int GetGridRowID(AdminFormObject target,string id,int row )
		{
			return target.GetGridRowID(id, row);
		}
		[PexMethod]
		public object GetEnum(AdminFormObject target,string id,Type enumType )
		{
			return target.GetEnum(id, enumType);
		}
		[PexMethod]
		public object GetEnum(AdminFormObject target,string id,Type enumType,object def )
		{
			return target.GetEnum(id, enumType, def);
		}
		[PexMethod]
		public int GetValueInt(AdminFormObject target,string id )
		{
			return target.GetValueInt(id);
		}
		[PexMethod]
		public Decimal GetValueDecimal(AdminFormObject target,string id )
		{
			return target.GetValueDecimal(id);
		}
		[PexMethod]
		public bool GetValueBool(AdminFormObject target,string id )
		{
			return target.GetValueBool(id);
		}
		[PexMethod]
		public DateTime GetValueDate(AdminFormObject target,string id )
		{
			return target.GetValueDate(id);
		}
		[PexMethod]
		public DateTime? GetValueDateNull(AdminFormObject target,string id )
		{
			return target.GetValueDateNull(id);
		}
		[PexMethod]
		public bool HasValue(AdminFormObject target,string id )
		{
			return target.HasValue(id);
		}
		[PexMethod]
		public DateTime? GetValueTimeNull(AdminFormObject target,string id )
		{
			return target.GetValueTimeNull(id);
		}
		[PexMethod]
		public DateTime GetValueTime(AdminFormObject target,string id )
		{
			return target.GetValueTime(id);
		}
		[PexMethod]
		public string GetValueString(AdminFormObject target,string id )
		{
			return target.GetValueString(id);
		}
		[PexMethod]
		public string GetValueBase(AdminFormObject target,string id,Control h )
		{
			return target.GetValueBase(id, h);
		}
		[PexMethod]
		public void SetItemVisible(AdminFormObject target,string id,int value,bool visible )
		{
			target.SetItemVisible(id, value, visible);
		}
		[PexMethod]
		public void SetItemVisible(AdminFormObject target,string id,string value,bool visible )
		{
			target.SetItemVisible(id, value, visible);
		}
		[PexMethod]
		public bool IsVisible(AdminFormObject target,string id )
		{
			return target.IsVisible(id);
		}
		[PexMethod]
		public void RefreshDirectories(AdminFormObject target, )
		{
			target.RefreshDirectories();
		}
		[PexMethod]
		public void RefreshDirectories(AdminFormObject target,AdminFormObject parent )
		{
			target.RefreshDirectories(parent);
		}
		[PexMethod]
		public void RefreshToolbar(AdminFormObject target,OmnitecModuleBase p )
		{
			target.RefreshToolbar(p);
		}
		[PexMethod]
		public void CreateToolbar(AdminFormObject target,OmnitecModuleBase p )
		{
			target.CreateToolbar(p);
		}
		[PexMethod]
		public void SelectActiveToolbar(AdminFormObject target, )
		{
			target.SelectActiveToolbar();
		}
		[PexMethod]
		public void SetActiveView(AdminFormObject target,AdminFormObject v )
		{
			target.SetActiveView(v);
		}
		[PexMethod]
		public void cmdToolbar_Click(AdminFormObject target,object sender,ImageClickEventArgs e )
		{
			target.cmdToolbar_Click(sender, e);
		}
		[PexMethod]
		public void cmdToolbarLink_Click(AdminFormObject target,object sender,EventArgs e )
		{
			target.cmdToolbarLink_Click(sender, e);
		}
		[PexMethod]
		public int GetViewCount(AdminFormObject target, )
		{
			return target.GetViewCount();
		}
		[PexMethod]
		public string ResourceString(AdminFormObject target,OmnitecModuleBase p,string s )
		{
			return target.ResourceString(p, s);
		}
		[PexMethod]
		public string GetResourceString(AdminFormObject target,OmnitecModuleBase p,string s )
		{
			return target.GetResourceString(p, s);
		}
		[PexMethod]
		public void CreateToolBarItem(AdminFormObject target,OmnitecModuleBase p,Control h,Control sub )
		{
			target.CreateToolBarItem(p, h, sub);
		}
		[PexMethod]
		public ListItem CreateListItem(AdminFormObject target,AdminFormObject o )
		{
			return target.CreateListItem(o);
		}
		[PexMethod]
		public void RemoveBlankRows(AdminFormObject target, )
		{
			target.RemoveBlankRows();
		}
		[PexMethod]
		public void CreateFormControls(AdminFormObject target, )
		{
			target.CreateFormControls();
		}
		[PexMethod]
		public void ParseControls(AdminFormObject target,Control ctrls,OmnitecModuleBase p )
		{
			target.ParseControls(ctrls, p);
		}
		[PexMethod]
		public void ParseControlsSub(AdminFormObject target,Control ctrls,ref StringBuilder sb )
		{
			target.ParseControlsSub(ctrls, StringBuilder);
		}
		[PexMethod]
		public string GetText(AdminFormObject target, )
		{
			return target.GetText();
		}
		[PexMethod]
		public string GetClickText(AdminFormObject target, )
		{
			return target.GetClickText();
		}
		[PexMethod]
		public string GetText(AdminFormObject target,OmnitecModuleBase mb )
		{
			return target.GetText(mb);
		}
		[PexMethod]
		public string GetHelpText(AdminFormObject target,OmnitecModuleBase mb )
		{
			return target.GetHelpText(mb);
		}
		[PexMethod]
		public void AdminButtonEvent(AdminFormObject target,object sender,CommandEventArgs e )
		{
			target.AdminButtonEvent(sender, e);
		}
		[PexMethod]
		public string FixString(AdminFormObject target,string s )
		{
			return target.FixString(s);
		}
		[PexMethod]
		public void CreateResxSub(AdminFormObject target,AdminFormObject om,StringBuilder sb )
		{
			target.CreateResxSub(om, sb);
		}
		[PexMethod]
		public void CreateResx(AdminFormObject target,OmnitecModuleBase p )
		{
			target.CreateResx(p);
		}
		[PexMethod]
		public void CreateDocsSub(AdminFormObject target,AdminFormObject om,StringBuilder sb,int tabs )
		{
			target.CreateDocsSub(om, sb, tabs);
		}
		[PexMethod]
		public void CreateDocs(AdminFormObject target,OmnitecModuleBase p )
		{
			target.CreateDocs(p);
		}
		[PexMethod]
		public LinkButton CreateImageButton(AdminFormObject target,string id,string command,string commandArg,CommandEventHandler evt,DefaultImages img )
		{
			return target.CreateImageButton(id, command, commandArg, evt, img);
		}
		[PexMethod]
		public LinkButton CreateImageButton(AdminFormObject target,string id,string command,string commandArg,CommandEventHandler evt,string imageUrl )
		{
			return target.CreateImageButton(id, command, commandArg, evt, imageUrl);
		}
		[PexMethod]
		public void ShowDivider(AdminFormObject target,string c,bool show )
		{
			target.ShowDivider(c, show);
		}
		[PexMethod]
		public void CreateControls(AdminFormObject target,OmnitecModuleBase p,Control h,StringBuilder sbJS,bool isDouble = false )
		{
			target.CreateControls(p, h, sbJS, isDouble);
		}

	}
}

projectfile
<Compile Include="UnitTests\Common\AdminFormNavTest.cs" />
<Compile Include="UnitTests\Common\AdminFormNavTest.Set.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormNavTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormNavTest.Get.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormNavTest.cs</DependentUpon>
</Compile>

<Compile Include="UnitTests\Common\AdminFormSelectorObjectTest.cs" />
<Compile Include="UnitTests\Common\AdminFormSelectorObjectTest.AdminFormSelectorObject.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormSelectorObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormSelectorObjectTest.AdminFormSelectorObject.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormSelectorObjectTest.cs</DependentUpon>
</Compile>

<Compile Include="UnitTests\Common\AdminFormTest.cs" />
<Compile Include="UnitTests\Common\AdminFormTest.AdminForm.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.AdminForm.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.SaveObjectData.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.SaveDataRecursive.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.SaveData.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.SetNav.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.SetNav.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.GetNavKey.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.GetNavSel1.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.GetNavSel2.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.GetNavPage.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.GetNavView.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.GetNavForceNext.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.LoadObjectData.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.LoadDataRecursive.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.LoadData.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.RefreshSelectorControls.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.RefreshSelectorData.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.Refresh.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.ReplaceText.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.ReplaceText.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.SetVisibleRow.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.SetVisible.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormTest.SetEnabled.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormTest.cs</DependentUpon>
</Compile>

<Compile Include="UnitTests\Common\AdminFormHelpBoxTest.cs" />
<Compile Include="UnitTests\Common\AdminFormHelpBoxTest.AdminFormHelpBox.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormHelpBoxTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormHelpBoxTest.AdminFormHelpBox.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormHelpBoxTest.cs</DependentUpon>
</Compile>

<Compile Include="UnitTests\Common\AdminFormObjectTest.cs" />
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetClickMessage.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetCommandEvent.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetEvent1.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetGridEvent.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetEvent2.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetHorizontal.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.HelpBox.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.HelpBox.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.IsRequired.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetDefault.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetDefault.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetColumns.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetSelectorValues.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetSelectorSelectedItems.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetSelectorCommandArg.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.FromSelectorArg.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetSelectorIDS.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.LoadSelectorResults.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.LoadSelectorSearch.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetSelectorObjects.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.WebControl.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Control.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Space.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Space.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Row.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Row.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.RowSpan.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.DoubleRow.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.RowSpanCenter.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.RowSpacer.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Grid.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Column.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Section.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SubSection.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.TextEditor.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.PlaceHolder.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Message.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Terms.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Terms.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.ChosenMulti.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.ChosenMulti.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.HiddenField.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.TextBox.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.TextBoxSecure.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SearchSelect.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.TextBoxBig.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.TextBox.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.TextArea.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.TextArea.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Password.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Date.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Time.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.NumberBox.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.NumberBox.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.User.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.CheckBox.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.DNNUrl.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.DNNFilePicker.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Label.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Label.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Image.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.ImageUpload.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.FileDelete.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Group.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.LinkButton.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.LinkButtonNoAjax.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.LinkButton.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Link.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Link.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SubView.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SubView.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.View.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.View.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.View.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.View.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Selector.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SMSelector.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.View.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Select2.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Chosen.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.DropList.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Color.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.CheckBoxList.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.TagControl.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.RadioList.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.ListBoxControl.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.ListBoxControl.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Font.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Item.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Item.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Item.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Item.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.Item.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetReadOnly.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetDataSource.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetDataSource.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetDataSource.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.LoadDataSourceItems.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.ProcessSQL.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetFormValues.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetForm.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetCurrentControlRow.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetPostBackMethod.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetParentObject.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetObject.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.DumpControls.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetMainControl.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetControlObject.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetTagSourceValue.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetValue.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetValue.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetValue.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetMessage.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.ClearMessage.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetValue.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetValue.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetValue.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetValueBase.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetGridRowID.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetEnum.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetEnum.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetValueInt.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetValueDecimal.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetValueBool.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetValueDate.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetValueDateNull.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.HasValue.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetValueTimeNull.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetValueTime.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetValueString.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetValueBase.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetItemVisible.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetItemVisible.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.IsVisible.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.RefreshDirectories.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.RefreshDirectories.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.RefreshToolbar.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.CreateToolbar.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SelectActiveToolbar.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.SetActiveView.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.cmdToolbar_Click.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.cmdToolbarLink_Click.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetViewCount.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.ResourceString.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetResourceString.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.CreateToolBarItem.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.CreateListItem.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.RemoveBlankRows.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.CreateFormControls.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.ParseControls.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.ParseControlsSub.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetText.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetClickText.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetText.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.GetHelpText.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.AdminButtonEvent.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.FixString.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.CreateResxSub.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.CreateResx.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.CreateDocsSub.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.CreateDocs.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.CreateImageButton.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.CreateImageButton.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.ShowDivider.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>
<Compile Include="UnitTests\Common\AdminFormObjectTest.CreateControls.g.cs">
	<DependentUpon>UnitTests\Common\AdminFormObjectTest.cs</DependentUpon>
</Compile>



